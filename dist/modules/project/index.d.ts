import { Options, ContextOnly } from './../../typings/globals';
declare const _default: {
    create: ({ input, context }: HDS.ICreateProjectOnMutationArguments & ContextOnly) => Promise<false | {
        path: string;
        allDocsData: {
            title: any;
            description: any;
            content: string;
            fileName: string | false;
            path: string;
        }[];
        __typename: "Project";
        id: string;
        name: string;
        shortTitle: string | null;
        nameWithOwner: string | null;
        longTitle: string | null;
        languages: HDS.ILanguage[] | null;
        projectLink: string;
        intendedUse: string;
        made: boolean | null;
        madeIndependently: boolean | null;
        license: (HDS.ILicense | null)[] | null;
        updatedAt: string | null;
        author: HDS.IAuthor | null;
        contributors: (HDS.IContributor | null)[] | null;
        docsDir: string;
        entryFile: string;
        assets: string | null;
    } | undefined>;
    open: ({ path: fullPath, context, force }: Options) => Promise<{
        path: string;
        allDocsData: {
            title: any;
            description: any;
            content: string;
            fileName: string | false;
            path: string;
        }[];
        __typename: "Project";
        id: string;
        name: string;
        shortTitle: string | null;
        nameWithOwner: string | null;
        longTitle: string | null;
        languages: HDS.ILanguage[] | null;
        projectLink: string;
        intendedUse: string;
        made: boolean | null;
        madeIndependently: boolean | null;
        license: (HDS.ILicense | null)[] | null;
        updatedAt: string | null;
        author: HDS.IAuthor | null;
        contributors: (HDS.IContributor | null)[] | null;
        docsDir: string;
        entryFile: string;
        assets: string | null;
    } | undefined>;
    createFromExisting: ({ input, context }: HDS.ICreateProjectFromExistingOnMutationArguments & ContextOnly) => Promise<false | {
        path: string;
        allDocsData: {
            title: any;
            description: any;
            content: string;
            fileName: string | false;
            path: string;
        }[];
        __typename: "Project";
        id: string;
        name: string;
        shortTitle: string | null;
        nameWithOwner: string | null;
        longTitle: string | null;
        languages: HDS.ILanguage[] | null;
        projectLink: string;
        intendedUse: string;
        made: boolean | null;
        madeIndependently: boolean | null;
        license: (HDS.ILicense | null)[] | null;
        updatedAt: string | null;
        author: HDS.IAuthor | null;
        contributors: (HDS.IContributor | null)[] | null;
        docsDir: string;
        entryFile: string;
        assets: string | null;
    } | undefined>;
};
export default _default;
